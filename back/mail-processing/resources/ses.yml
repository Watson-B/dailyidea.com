#Conditions:
#  CreateNewSesRuleset: !Equals [!Ref ExistingSesRulesetName, '']


Resources:
  DailyIdeaSesReceiverRuleSet:
    Type: AWS::SES::ReceiptRuleSet
    # Only create if ExistingSesRulesetName is empty
    #Condition: CreateNewSesRuleset
    Properties:
      RuleSetName: DailyIdeaSesReceiverRuleSet-${self:provider.stage}

  DailyIdeaSesReceiverRuleProd:
    Type: AWS::SES::ReceiptRule
    Properties:
      RuleSetName:
        Ref: DailyIdeaSesReceiverRuleSet
      Rule:
        Name: ReceiptRuleProd
        Recipients:
          - ${env:PROD_MAILBOX}
        Enabled: true
        Actions:
          - S3Action:
              BucketName:
                Ref: SesEmailStorageS3Bucket
          - LambdaAction:
              FunctionArn:
                Fn::Join:
                  - ':'
                  - - 'arn:aws:lambda'
                    - Ref: 'AWS::Region'
                    - Ref: 'AWS::AccountId'
                    - 'function:dailyidea-mail-processing-prod-processIncomingMail'
  DailyIdeaSesReceiverRuleDev:
    Type: AWS::SES::ReceiptRule
    Properties:
      RuleSetName:
        Ref: DailyIdeaSesReceiverRuleSet
      Rule:
        Name: ReceiptRuleDev
        Recipients:
          - ${env:DEV_MAILBOX}
        Enabled: true
        Actions:
          - S3Action:
              BucketName:
                Ref: SesEmailStorageS3Bucket
          - LambdaAction:
              FunctionArn:
                Fn::Join:
                  - ':'
                  - - 'arn:aws:lambda'
                    - Ref: 'AWS::Region'
                    - Ref: 'AWS::AccountId'
                    - 'function:dailyidea-mail-processing-dev-processIncomingMail'

  DailyIdeaRequestTemplate:
    Type: AWS::SES::Template
    Properties:
      Template:
        TemplateName: ${self:provider.requestDailyIdeaEmailTemplateName}
        SubjectPart: '[Daily Idea] Idea for {{ TODAY }}'
        TextPart: ${file(mail_templates/request_daily_idea/daily_idea.txt)}
        HtmlPart: ${file(mail_templates/request_daily_idea/daily_idea.html)}

  DailyIdeaWeeklyDigestTemplate:
    Type: AWS::SES::Template
    Properties:
      Template:
        TemplateName: ${self:provider.weeklyDigestEmailTemplateName}
        SubjectPart: '[Daily Idea] Weekly Digest'
        TextPart: ${file(mail_templates/weekly_digest/weekly_digest.txt)}
        HtmlPart: ${file(mail_templates/weekly_digest/weekly_digest.html)}

  DailyIdeaWeeklyStatsTemplate:
    Type: AWS::SES::Template
    Properties:
      Template:
        TemplateName: ${self:provider.weeklyStatsEmailTemplateName}
        SubjectPart: '[Daily Idea] Weekly Stats'
        TextPart: ${file(mail_templates/weekly_stats/weekly_stats.txt)}
        HtmlPart: ${file(mail_templates/weekly_stats/weekly_stats.html)}

  SesEmailStorageS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ${self:custom.mailBucket}
    DeletionPolicy: Retain
    Description: S3 bucket to hold SES received emails
  SampleBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: SesEmailStorageS3Bucket
      PolicyDocument:
        Statement:
        - Action:
          - "s3:PutObject"
          - "s3:GetObject"
          Effect: "Allow"
          Resource:
            Fn::Join:
              - ""
              - - "arn:aws:s3:::"
                - Ref: SesEmailStorageS3Bucket
                - "/*"
          Principal:
            Service:
              ses.amazonaws.com
          Condition:
            StringEquals:
              aws:Referer:
                - Ref: AWS::AccountId

  # define what AWS resources can invoke the SesReceivedEmailProcessorLambda
  LambdaResourcePolicy:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
          - ProcessIncomingMailLambdaFunction
          - Arn
      Principal: ses.amazonaws.com
      Action: lambda:InvokeFunction
