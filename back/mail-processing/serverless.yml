service: 'dailyidea-mail-processing'

package:
  exclude:
    - node_modules/**
    - venv/**

custom:
  ideasTableName: dailyidea-ideas-${self:provider.stage}
  usersTableName: dailyidea-users-${self:provider.stage}
  savesTableName: dailyidea-saves-${self:provider.stage}
  statsActionsTableName: dailyidea-stats-actions-${self:provider.stage}
  commentsTableName: dailyidea-comments-${self:provider.stage}
  sentry:
    dsn: ${env:SENTRY_DSN}
  prune:
    automatic: true
    number: 10
  serverless-offline:
    port: 4000
#  dynamodb:
#    start:
#      port: 8001
#      inMemory: true
#      migrate: true
  domainName: ${env:DOMAIN_NAME, 'beta.dailyidea.com'}
  mailBucket: dailyidea-ses-${self:provider.stage}
  ideasMailBox: ${env:IDEAS_MAILBOX, 'ideas-dev'}
  localstack:
    host: http://localhost
    debug: true
    stages:
      - local
    endpoints:
      S3: http://localhost:4572
      DynamoDB: http://localhost:4570
      CloudFormation: http://localhost:4581
      Elasticsearch: http://localhost:4571
      ES: http://localhost:4578
      SNS: http://localhost:4575
      SQS: http://localhost:4576
      Lambda: http://localhost:4574
      Kinesis: http://localhost:4568
  pythonRequirements:
    dockerizePip: non-linux
    pythonBin:  ${env:PYTHON_BIN, 'python3'}

  s3Sync:
    - bucketName: ${self:provider.emailStaticBucketName} # required
      localDir: static # required
      acl: public-read

functions:
  processIncomingMail:
    handler: process_incoming_mail.endpoint
    role: LambdaProcessIncomingMailFunctionRole
    environment:
      SES_S3_BUCKET_NAME: dailyidea-ses-${env:ACTIVE_SES_RULE_SET_STAGE}
      BUCKET_URL_PREFIX: 'https://${self:provider.emailStaticBucketName}.s3.amazonaws.com'
  sendDailyToUser:
    handler: request_daily_idea_user.endpoint
    environment:
      BUCKET_URL_PREFIX: 'https://${self:provider.emailStaticBucketName}.s3.amazonaws.com'
      REQUEST_DAILY_EMAIL_TEMPLATE_NAME: ${self:provider.requestDailyIdeaEmailTemplateName}
  sendWeeklyDigest:
    memorySize: 512
    handler: test_send_weekly_digest.handler
    environment:
      BUCKET_URL_PREFIX: 'https://${self:provider.emailStaticBucketName}.s3.amazonaws.com'
      WEEKLY_DIGEST_TEMPLATE_NAME: ${self:provider.weeklyDigestEmailTemplateName}
  requestIdeasMail:
    handler: request_daily_idea.endpoint
    memorySize: 512
    timeout: 60
    environment:
      BUCKET_URL_PREFIX: 'https://${self:provider.emailStaticBucketName}.s3.amazonaws.com'
      REQUEST_DAILY_EMAIL_TEMPLATE_NAME: ${self:provider.requestDailyIdeaEmailTemplateName}
    events:
      - schedule:
          rate: cron(0 12 * * ? *)
          enabled: true
  weeklyDigest:
    handler: weekly_digest.endpoint
    memorySize: 512
    timeout: 120
    environment:
      BUCKET_URL_PREFIX: 'https://${self:provider.emailStaticBucketName}.s3.amazonaws.com'
      WEEKLY_DIGEST_TEMPLATE_NAME: ${self:provider.weeklyDigestEmailTemplateName}
    events:
      - schedule:
          rate: cron(0 12 ? * SUN *)
          enabled: true
  weeklyStats:
    handler: weekly_stats.endpoint
    memorySize: 512
    timeout: 120
    environment:
      BUCKET_URL_PREFIX: 'https://${self:provider.emailStaticBucketName}.s3.amazonaws.com'
      WEEKLY_STATS_TEMPLATE_NAME: ${self:provider.weeklyStatsEmailTemplateName}
    events:
      - schedule:
          rate: cron(0 12 ? * SUN *)
          enabled: true

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-localstack
  - serverless-prune-plugin
  - serverless-python-requirements
  - serverless-s3-sync

provider:
  name: 'aws'
  runtime: 'python3.6'
  stage: ${env:STAGE, 'local'}
  region: ${env:AWS_REGION, 'us-east-1'}
  emailStaticBucketName: dailyidea-serverless-email-static-${self:provider.stage}
  requestDailyIdeaEmailTemplateName: requestDailyIdeaEmailTemplate-${self:provider.stage}
  weeklyDigestEmailTemplateName: weeklyDigestEmailTemplate-${self:provider.stage}
  weeklyStatsEmailTemplateName: weeklyStatsEmailTemplate-${self:provider.stage}
  environment:
    AWS_DEPLOY_REGION: ${self:provider.region}
    MAILBOX_ADDR: ${env:MAILBOX, 'ideas@beta.dailyidea.com'}
    DOMAIN_NAME: ${self:custom.domainName}
    SES_AWS_REGION: ${self:provider.region}
    USERS_TABLE_NAME: ${self:custom.usersTableName}
    IDEAS_TABLE_NAME: ${self:custom.ideasTableName}
    SAVES_TABLE_NAME: ${self:custom.savesTableName}
    STATS_ACTIONS_TABLE_NAME: ${self:custom.statsActionsTableName}
    COMMENTS_TABLE_NAME: ${self:custom.commentsTableName}
    SENTRY_ENVIRONMENT: ${opt:stage, self:provider.stage}
    SENTRY_DSN: ${env:SENTRY_DSN}
    SECRET_TOKEN: ${env:SECRET_TOKEN, 'secret-tk1x'}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource:
        - { "Fn::GetAtt": ["IdeasTable", "Arn" ] }
        - 'Fn::Join':
            - ':'
            - - 'arn:aws:dynamodb'
              - Ref: 'AWS::Region'
              - Ref: 'AWS::AccountId'
              - 'table/${self:custom.usersTableName}'
        - 'Fn::Join':
            - ':'
            - - 'arn:aws:dynamodb'
              - Ref: 'AWS::Region'
              - Ref: 'AWS::AccountId'
              - 'table/${self:custom.usersTableName}/index/emailIndex'
        - 'Fn::Join':
            - ':'
            - - 'arn:aws:dynamodb'
              - Ref: 'AWS::Region'
              - Ref: 'AWS::AccountId'
              - 'table/${self:custom.ideasTableName}'
        - 'Fn::Join':
            - ':'
            - - 'arn:aws:dynamodb'
              - Ref: 'AWS::Region'
              - Ref: 'AWS::AccountId'
              - 'table/${self:custom.ideasTableName}/index/*'
        - 'Fn::Join':
            - ':'
            - - 'arn:aws:dynamodb'
              - Ref: 'AWS::Region'
              - Ref: 'AWS::AccountId'
              - 'table/${self:custom.savesTableName}'
        - 'Fn::Join':
            - ':'
            - - 'arn:aws:dynamodb'
              - Ref: 'AWS::Region'
              - Ref: 'AWS::AccountId'
              - 'table/${self:custom.savesTableName}/index/*'
        - 'Fn::Join':
            - ':'
            - - 'arn:aws:dynamodb'
              - Ref: 'AWS::Region'
              - Ref: 'AWS::AccountId'
              - 'table/${self:custom.statsActionsTableName}'
        - 'Fn::Join':
            - ':'
            - - 'arn:aws:dynamodb'
              - Ref: 'AWS::Region'
              - Ref: 'AWS::AccountId'
              - 'table/${self:custom.statsActionsTableName}/index/*'
        - 'Fn::Join':
            - ':'
            - - 'arn:aws:dynamodb'
              - Ref: 'AWS::Region'
              - Ref: 'AWS::AccountId'
              - 'table/${self:custom.commentsTableName}'
        - 'Fn::Join':
            - ':'
            - - 'arn:aws:dynamodb'
              - Ref: 'AWS::Region'
              - Ref: 'AWS::AccountId'
              - 'table/${self:custom.commentsTableName}/index/*'
    - Effect: Allow
      Action:
        - ses:SendEmail
        - ses:SendBulkTemplatedEmail
      Resource: "*"
resources:
  - ${file(resources/dynamo-idea-table.yml)}
  - ${file(resources/ses.yml)}
  - ${file(resources/s3.yml)}
  - ${file(resources/process-incoming-mail-function-role.yml)}

